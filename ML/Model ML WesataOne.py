# -*- coding: utf-8 -*-
"""Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rNFPyTQShxP7zjG9t3ou8Zt0y9sDwrI7
"""

import numpy as np
import pandas as pd
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# URLs to the datasets
url_tourism = "https://raw.githubusercontent.com/aidulfitri/WesataOne-ML/main/data/tourism_with_id.csv"
url_rating = "https://raw.githubusercontent.com/aidulfitri/WesataOne-ML/main/data/tourism_rating.csv"

# Reading the datasets
df_places = pd.read_csv(url_tourism)
rating_df = pd.read_csv(url_rating)

# Selecting necessary columns
data_place = df_places[["Place_Id", "Place_Name", "Category", "City", "Description", "Rating"]]
rating_df = rating_df[["User_Id", "Place_Id", "Place_Ratings"]]

data_place.drop_duplicates(inplace=True)
data_place.dropna(inplace=True)

# One-hot encode Category and City features
data_place = pd.get_dummies(data_place, columns=["Category", "City"])

# Preparing the feature set
place_features = data_place.drop(columns=["Place_Id", "Place_Name", "Description", "Rating"]).values

# Standardize features
scaler = StandardScaler()
place_features_scaled = scaler.fit_transform(place_features)

# Splitting the data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(place_features_scaled, data_place["Rating"], test_size=0.2, random_state=1)

# Building the TensorFlow model
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1)
])

# Compiling the model
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mse'])

# Training the model
history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.2)

"""#Recommendation for Users"""

# Function to get user profile from rated places
def get_user_profile(user_id, rating_df, data_place, place_features):
    user_ratings = rating_df[rating_df['User_Id'] == user_id]
    rated_places = user_ratings.merge(data_place, on='Place_Id')
    rated_place_ids = rated_places['Place_Id'].values
    rated_place_features = place_features[data_place['Place_Id'].isin(rated_place_ids)]
    user_profile = rated_place_features.mean(axis=0)
    return user_profile

def recommend_places(user_id, rating_df, data_place, place_features, model, city_filter=None, category_filter=None):
    user_profile = get_user_profile(user_id, rating_df, data_place, place_features)
    user_profile = user_profile.reshape(1, -1)


    predicted_ratings = model.predict(place_features)
    data_place['predicted_rating'] = predicted_ratings

    if city_filter:
        city_col = 'City_' + city_filter
        if city_col in data_place.columns:
            data_place = data_place[data_place[city_col] == 1]
    if category_filter:
        category_col = 'Category_' + category_filter
        if category_col in data_place.columns:
            data_place = data_place[data_place[category_col] == 1]

    recommendations = data_place.sort_values(by='predicted_rating', ascending=False).head(20)
    recommendations = recommendations[['Place_Name', 'City_' + city_filter, 'Description', 'predicted_rating']]

    return recommendations

user_id = 1
city_filter = 'Jakarta'
category_filter = 'Budaya'

recommendations = recommend_places(user_id, rating_df, data_place, place_features_scaled, model, city_filter, category_filter)
print(recommendations)

"""# Recommendations on the main display"""

def recommend_popular_places(data_place, num_recommendations=20):
    popular_places = data_place.sort_values(by='Rating', ascending=False).head(num_recommendations)

    recommendations = popular_places[['Place_Name', 'Description', 'Rating']]

    return recommendations

# Contoh penggunaan untuk pengguna baru
recommendations_for_new_user = recommend_popular_places(data_place)
print(recommendations_for_new_user)

"""#Usage example for new users"""

def recommend_popular_places_with_filter(data_place, city_filter=None, category_filter=None, num_recommendations=20):
    filtered_places = data_place

    if city_filter:
        filtered_places = filtered_places[filtered_places['City_' + city_filter] == 1]
    if category_filter:
        filtered_places = filtered_places[filtered_places['Category_' + category_filter] == 1]

    # Urutkan tempat berdasarkan rating tertinggi
    popular_places = filtered_places.sort_values(by='Rating', ascending=False).head(num_recommendations)

    # Pilih kolom yang diperlukan
    recommendations = popular_places[['Place_Name', 'Description', 'Rating']]

    return recommendations

# Contoh penggunaan untuk pengguna baru dengan filter kategori dan wilayah
city_filter = 'Jakarta'
category_filter = 'Budaya'

recommendations_for_new_user = recommend_popular_places_with_filter(data_place, city_filter, category_filter)
print(recommendations_for_new_user)

"""# Plot"""

import matplotlib.pyplot as plt

# Ambil data loss dari history
train_loss = history.history['loss']
val_loss = history.history['val_loss']

# Plot loss
plt.plot(train_loss, label='Training Loss')
plt.plot(val_loss, label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

# Simpan model dalam format .h5
model.save("wesataone.h5")

from google.colab import files

# Unduh file .h5
files.download("wesataone.h5")

# Simpan arsitektur model dalam format .json
model_json = model.to_json()
with open("modelwesataone_architecture.json", "w") as json_file:
    json_file.write(model_json)

# Unduh file .json
files.download("modelwesataone_architecture.json")